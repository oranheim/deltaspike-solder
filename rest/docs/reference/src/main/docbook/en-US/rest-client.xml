<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="rest.client">
    <title>RESTEasy Client Framework Integration</title>

    <para>
        The RESTEasy Client Framework is a framework for writing clients
        for
        REST-based web services. It reuses JAX-RS metadata for creating
        HTTP
        requests. For more information about the framework, refer to the
        <ulink url="http://docs.jboss.org/resteasy/docs/2.0.0.GA/userguide/html/RESTEasy_Client_Framework.html">project documentation</ulink>
        .
    </para>

    <para>
        Integration with the RESTEasy Client Framework is optional in
        Seam REST and only available when RESTEasy is available on classpath.
	</para>

    <tip>
        <para>
            Although RESTEasy is part of JBoss AS 7, not all of the required dependencies are exposed to the application
            classpath automatically. To enable RESTEasy Client Framework on JBoss AS 7, add the following line to
            <filename>META-INF/MANIFEST.MF</filename>
            <programlisting>Dependencies: org.apache.httpcomponents</programlisting>
        </para>
    </tip>

    <sect1>
        <title>Using RESTEasy Client Framework with Seam REST</title>

        <para>
            Let us assume as an example that a remote server exposes a web service for providing task details to the client
            through the
            <literal>TaskService</literal>
            interface below.
        </para>

        <example>
            <title>Sample JAX-RS annotated interface</title>
            <programlisting role="JAVA"><![CDATA[@Path("/task")
@Produces("application/xml")
public interface TaskService
{
	@GET
	@Path("/{id}")
	Task getTask(@PathParam("id")long id);
}]]></programlisting>
        </example>

        <para>
            To access the remote web service, Seam REST builds and injects a client object of the web service.
		</para>

        <example>
            <title>Injecting REST Client</title>
            <programlisting role="JAVA"><![CDATA[@Inject @RestClient("http://example.com")
private TaskService taskService;

...

Task task = taskService.getTask(1);
]]></programlisting>
        </example>

        <para>
            The Seam REST module injects a
            proxied
            <literal>TaskService</literal>
            interface and the RESTEasy Client
            Framework converts every method invocation on the
            <literal>TaskService</literal>
            to an
            HTTP request and sends it over the wire to
            <literal>http://example.com</literal>
            . The
            HTTP response is unmarshalled automatically and the response object
            is returned by the method call.
        </para>

        <para>
            URI definition supports EL expressions. 
		</para>

        <programlisting role="JAVA"><![CDATA[@Inject @RestClient("#{example.service.uri}")]]></programlisting>

    </sect1>

    <sect1>
        <title>Manual ClientRequest API</title>
        <para>
            Besides proxying JAX-RS interfaces, the RESTEasy Client Framework
            provides the ClientRequest API for manual building of HTTP requests. For more information on the ClientRequest API, refer to the
            <ulink url=" http://docs.jboss.org/resteasy/docs/2.0.0.GA/userguide/html/RESTEasy_Client_Framework.html#ClientRequest">project documentation</ulink>
            .
        </para>

        <example>
            <title>Injecting ClientRequest</title>
            <programlisting role="JAVA"><![CDATA[@Inject @RestClient("http://localhost:8080/test/ping")
private ClientRequest request;

...

request.accept(MediaType.TEXT_PLAIN_TYPE);
ClientResponse<String> response = request.get(String.class);]]></programlisting>
        </example>
    </sect1>

    <sect1>
        <title>Client Executor Configuration</title>
        <para>
            If not specified otherwise, every request is executed by the default Apache HTTP Client 4 configuration.
            Provide an alternative <literal>ClientExecutor</literal> implementation to change this.   
        </para>

        <example>
            <title>Custom Apache HTTP Client 4 configuration</title>
            <programlisting role="JAVA"><![CDATA[@Produces
public ClientExecutor createExecutor()
{
	HttpParams params = new BasicHttpParams();
    ConnManagerParams.setMaxTotalConnections(params, 3);
    ConnManagerParams.setTimeout(params, 1000);

    SchemeRegistry schemeRegistry = new SchemeRegistry();
    schemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));

    ClientConnectionManager cm = new ThreadSafeClientConnManager(params, schemeRegistry);
    HttpClient httpClient = new DefaultHttpClient(cm, params);

    return new ApacheHttpClient4Executor(httpClient);
}]]></programlisting>
        </example>
    </sect1>
</chapter>