<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="events">
	<title>Faces Events Propagation</title>
	<para>
		When the seam-faces module is installed in a web application, JSF events will automatically be propagated
		via the CDI event-bridge, enabling managed beans to easily observe all Faces events.
	</para>
	<para>
	There are two categories of events: JSF phase events, and JSF system events. Phase events are triggered
	as JSF processes each lifecycle phase, while system events are raised at more specific, fine-grained events during 
	request processing.
	</para>
	<section id="events.phases">
		<title>JSF Phase events</title>
		
		<para>
			A JSF phase listener is a class that implements <literal>javax.faces.event.PhaseListener</literal> and
			is registered in the web application's <literal>faces-config.xml</literal> file. By implementing the methods of the
			interfaces, the user can observe events fired before or after any of the six lifecycle phases of a JSF request:
			<literal>restore view</literal>, <literal>apply request values</literal>, <literal>process validations</literal>,
			<literal>update model values</literal>, <literal>invoke application</literal> or <literal>render view</literal>.
		</para>

		<tip>
			<para>
				In order to observe events in an EJB JAR, the beans.xml file must be in both the WEB-INF folder of the WAR, and inside the EJB JAR containing the observer.
			</para>
		</tip>

		
		<section id="events.phases.seam">
			<title>Seam Faces Phase events</title>
			<para>
				What Seam provides is propagation of these Phase events to the CDI event bus; therefore, you can observe events 
				using normal CDI <literal>@Observes</literal> methods. Bringing the events to CDI beans removes the need to
				register phase listener classes via XML, and gives the added benefit of injection, alternatives, interceptors 
				and access to all other features of CDI.
			</para>
			<para>
				Creating an observer method in CDI is simple; just provide a method in a managed bean that is annotated with
				<literal>@Observes</literal>. Each observer method must accept at least one method parameter: the event object; 
				the type of this object determines the type of event being observed.  Additional parameters may also be specified,
				and their values will be automatically injected by the container as per the CDI specification.
			</para>
			<para>
				In this case, the event object passed along from the phase listener is a 
				<literal>javax.faces.event.PhaseEvent</literal>. The following example observes all Phase events.
		  </para>
				
				<programlisting role="JAVA">
public void observeAll(@Observes PhaseEvent e)
{
	// Do something with the event object
} </programlisting>

			<para>
			Events can be further filtered by adding Qualifiers. The name of the method itself is not significant. 
			(See the CDI Reference Guide for more information on events and observing.)
			</para>
			<para>
				Since the example above simply processes all events, however, it might be appropriate to filter out some events
				that we aren't interested in. As stated earlier, there are six phases in the JSF lifecycle, and an event is
				fired before and after each, for a total of 12 events. The <literal>@Before</literal> and 
				<literal>@After</literal> "temporal" qualifiers can be used to observe events occurring only before or only after
				a Phase event. For example:
			</para>
				<programlisting role="JAVA">
public void observeBefore(@Observes @Before PhaseEvent e)
{
	// Do something with the "before" event object
}

public void observeAfter(@Observes @After PhaseEvent e)
{
	// Do something with the "after" event object
} </programlisting>

			<para>
				If we are interested in both the "before" and "after" event of a particular phase, we can limit them
				by adding a "lifecycle" qualifier that corresponds to the phase:
			</para>
			
				<programlisting role="JAVA">
public void observeRenderResponse(@Observes @RenderResponse PhaseEvent e)
{
	// Do something with the "render response" event object
} </programlisting>

			<para>
				By combining a temporal and lifecycle qualifier, we can achieve the most specific qualification:
			</para>
			
				<programlisting role="JAVA">
public void observeBeforeRenderResponse(@Observes @Before @RenderResponse PhaseEvent e)
{
	// Do something with the "before render response" event object
} </programlisting>

		</section>
		
		
		<section id="events.phases.seam.table">
			<title>Phase events listing</title>
			<para>
				This is the full list of temporal and lifecycle qualifiers
				<informaltable>
					<tgroup cols="3">
						<colspec colnum="1" colwidth="1*" />
						<colspec colnum="2" colwidth="1*" />
						<colspec colnum="3" colwidth="3*" />
						<thead>
							<row>
								<entry>Qualifier</entry>
								<entry>Type</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>@Before</entry>
								<entry>temporal</entry>
								<entry>Qualifies events before lifecycle phases</entry>
							</row>
							<row>
								<entry>@After</entry>
								<entry>temporal</entry>
								<entry>Qualifies events after lifecycle phases</entry>
							</row>
							<row>
								<entry>@RestoreView</entry>
								<entry>lifecycle</entry>
								<entry>Qualifies events from the "restore view" phase</entry>
							</row>
							<row>
								<entry>@ApplyRequestValues</entry>
								<entry>lifecycle</entry>
								<entry>Qualifies events from the "apply request values" phase</entry>
							</row>
							<row>
								<entry>@ProcessValidations</entry>
								<entry>lifecycle</entry>
								<entry>Qualifies events from the "process validations" phase</entry>
							</row>
							<row>
								<entry>@UpdateModelValues</entry>
								<entry>lifecycle</entry>
								<entry>Qualifies events from the "update model values" phase</entry>
							</row>
							<row>
								<entry>@InvokeApplication</entry>
								<entry>lifecycle</entry>
								<entry>Qualifies events from the "invoke application" phase</entry>
							</row>
							<row>
								<entry>@RenderResponse</entry>
								<entry>lifecycle</entry>
								<entry>Qualifies events from the "render response" phase</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				The event object is always a <literal>javax.faces.event.PhaseEvent</literal> and according to the general
				CDI principle, filtering is tightened by adding qualifiers and loosened by omitting them.
			</para>
		</section>
	</section>
	
	
	
	<section id="events.system">
		<title>JSF system events</title>
		<para>
			Similar to JSF Phase Events, System Events take place when specific events occur within the JSF life-cycle. Seam 
			Faces provides a bridge for all JSF System Events, and propagates these events to CDI. 
		</para>
		
		
		<section id="events.system.seam">
			<title>Seam Faces System events</title>
			<para>
				This is an example of observing a Faces system event:
			</para>

				<programlisting role="JAVA">
public void observesThisEvent(@Observes ExceptionQueuedEvent e)
{
	// Do something with the event object
} </programlisting>

		</section>
		
		
		
		
		<section id="events.system.seam.listing">
			<title>System events listing</title>
			<para>
				Since all JSF system event objects are distinct, no qualifiers are needed to observe them. The following events 
				may be observed:
				<informaltable>
					<tgroup cols="3">
						<colspec colnum="1" colwidth="3*" />
						<colspec colnum="2" colwidth="1*" />
						<colspec colnum="3" colwidth="4*" />
						<thead>
							<row>
								<entry>Event object</entry>
								<entry>Context</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>SystemEvent</entry>
								<entry>all</entry>
								<entry>All events</entry>
							</row>
							<row>
								<entry>ComponentSystemEvent</entry>
								<entry>component</entry>
								<entry>All component events</entry>
							</row>
							<row>
								<entry>PostAddToViewEvent</entry>
								<entry>component</entry>
								<entry>After a component was added to the view</entry>
							</row>
							<row>
								<entry>PostConstructViewMapEvent</entry>
								<entry>component</entry>
								<entry>After a view map was created</entry>
							</row>
							<row>
								<entry>PostRestoreStateEvent</entry>
								<entry>component</entry>
								<entry>After a component has its state restored</entry>
							</row>
							<row>
								<entry>PostValidateEvent</entry>
								<entry>component</entry>
								<entry>After a component has been validated</entry>
							</row>
							<row>
								<entry>PreDestroyViewMapEvent</entry>
								<entry>component</entry>
								<entry>Before a view map has been restored</entry>
							</row>
							<row>
								<entry>PreRemoveFromViewEvent</entry>
								<entry>component</entry>
								<entry>Before a component has been removed from the view</entry>
							</row>						
							<row>
								<entry>PreRenderComponentEvent</entry>
								<entry>component</entry>
								<entry>After a component has been rendered</entry>
							</row>						
							<row>
								<entry>PreRenderViewEvent</entry>
								<entry>component</entry>
								<entry>Before a view has been rendered</entry>
							</row>						
							<row>
								<entry>PreValidateEvent</entry>
								<entry>component</entry>
								<entry>Before a component has been validated</entry>
							</row>						
							<row>
								<entry>ExceptionQueuedEvent</entry>
								<entry>system</entry>
								<entry>When an exception has been queued</entry>
							</row>						
							<row>
								<entry>PostConstructApplicationEvent</entry>
								<entry>system</entry>
								<entry>After the application has been constructed</entry>
							</row>						
							<row>
								<entry>PostConstructCustomScopeEvent</entry>
								<entry>system</entry>
								<entry>After a custom scope has been constructed</entry>
							</row>		
							<row>
								<entry>PreDestroyApplicationEvent</entry>
								<entry>system</entry>
								<entry>Before the application is destroyed</entry>
							</row>		
							<row>
								<entry>PreDestroyCustomScopeEvent</entry>
								<entry>system</entry>
								<entry>Before a custom scope is destroyed</entry>
							</row>		
						</tbody>
					</tgroup>
				</informaltable>
			</para>
		</section>
		
		
		
		<section id="events.system.component">
			<title>Component system events</title>
			<para>
				There is one qualifier, <literal>@Component</literal> that can be used with component events by specifying the component ID. Note that
				view-centric component events <literal>PreRenderViewEvent</literal>, <literal>PostConstructViewMapEvent</literal> and  
				<literal>PreDestroyViewMapEvent</literal> do not fire with the <literal>@Component</literal> qualifier.
      </para>
      				
				<programlisting role="JAVA">
public void observePrePasswordValidation(@Observes @Component("form:password") PreValidateEvent e)
{
// Do something with the "before password is validated" event object
} </programlisting>

      <para>
				Global system events are observer without the component qualifier
		  </para>
				<programlisting role="JAVA">
public void observeApplicationConstructed(@Observes PostConstructApplicationEvent e)
{
// Do something with the "after application is constructed" event object
} </programlisting>

      <para>
				The name of the observing method is not relevant; observers are defined solely via annotations.
			</para>
		</section>		
		
	</section>
</chapter>
