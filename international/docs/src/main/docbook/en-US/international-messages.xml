<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="international.messages">
	<title>Messages</title>
	<section id="createi18nMessages">
      <title>Message Creation</title>
   	<para>
         There are currently two ways to create a message within the module.
      </para>
      <para>
         The first would mostly be used when you don't want to add the generated message
         directly to the UI, but want to log it out, or store it somewhere else
      </para>
<programlisting role="JAVA"><![CDATA[@Inject
private MessageFactory factory;
 
public String getMessage() {
    MessageBuilder builder = factory.info("There are {0} cars, and they are all {1}; {1} is the best color.", 5, "green");
    return builder.build().getText();
}]]></programlisting>
      <para>
         The second is to add the message to a list that will be returned to the UI for display.
      </para>
<programlisting role="JAVA"><![CDATA[@Inject
private Messages messages;
 
public void setMessage() {
    messages.info("There are {0} cars, and they are all {1}; {1} is the best color.", 5, "green");
}]]></programlisting>
      <para>
         Either of these methods supports the four message levels which are info, warning, error and fatal.
      </para>
      <para>
         Both MessageFactory and Messages support four ways in which to create a Message:</para>
      <itemizedlist>
         <listitem>Directly adding the message</listitem>
         <listitem>Directly adding the message and replacing parameters</listitem>
         <listitem>Retrieving the message from a bundle</listitem>
         <listitem>Retrieving the message from a bundle and replacing parameters</listitem>
      </itemizedlist>
      <para>
         Examples for each of these are:</para>
      <itemizedlist>
         <listitem><programlisting role="JAVA"><![CDATA[messages.info("Simple Text");]]></programlisting></listitem>
         <listitem><programlisting role="JAVA"><![CDATA[messages.info("Simple Text with {0} parameter", 1);]]></programlisting></listitem>
         <listitem><programlisting role="JAVA"><![CDATA[messages.info(new BundleKey("org.jboss.international.seam.test.TestBundle", "key1"));]]></programlisting></listitem>
         <listitem><programlisting role="JAVA"><![CDATA[messages.info(new BundleKey("org.jboss.international.seam.test.TestBundle", "key2"), 1);]]></programlisting></listitem>
      </itemizedlist>
   </section>

	<section id="i18nProperties">
      <title>Properties Files</title>
      <para>
         The examples in the previous section on how to create a message from a properties file made the assumption
         that you had already created it!  Now we tell you how to actually do that.
      </para>
      <para>
         When creating a <literal>BundleKey</literal> in the previous section, we were passing it a bundle name of
         "org.jboss.international.seam.test.TestBundle".  This name is essentially the path to the properties file!
         Let me explain.  As we all know properties files need to be on the classpath for our code to find them, so
         "org.jboss.international.seam.test.TestBundle" is telling our code that on the classpath there is a
         <literal>TestBundle.properties</literal> file located at a path of <literal>org/jboss/international/seam/test</literal>.
      </para>
      <para>
         To create a property file for another language, it's simply a case of appending the name of the locale to
         the end of the file name.  Such as <literal>TestBundle_fr.properties</literal> for French or
         <literal>TestBundle_en_US.properties</literal> for American English.
      </para>
      <note>
         If you only ever intend to use a single language within your application, there is no need to create a locale specific
         properties file, as the non locale version will be used if a locale specific properties file is not present.
      </note>
   </section>
</chapter>
