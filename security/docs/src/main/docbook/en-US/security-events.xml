<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="security-events">
  <title>Security - Events</title>

  <section>
    <title>Introduction</title>
       
    <para>
      A number of CDI events are fired during the course of many security-related operations, allowing
      additional business logic to be executed in response to certain security events.  This is useful
      if you would like to generate additional logging or auditing, or produce messages to display to
      the user.
    </para>
  </section>

  <section>
    <title>Event list</title>
    
    <para>
      The following table contains the list of event classes that may be fired by Seam Security, along 
      with a description of when the event is fired.  All event classes are contained in the
      <code>org.jboss.seam.security.events</code> package.
    </para>
    
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Event</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>AlreadyLoggedInEvent</entry>
            <entry>Fired when a user who is already logged in attempts to log in again</entry>
          </row>
          <row>
            <entry>AuthorizationCheckEvent</entry>
            <entry>Fired when an authorization check is performed, such as <code>Identity.hasPermission().</code> </entry>
          </row>
          <row>
            <entry>CredentialsUpdatedEvent</entry>
            <entry>Fired whenever a user's credentials (such as their username or password) are updated.</entry>
          </row>
          <row>
            <entry>DeferredAuthenticationEvent</entry>
            <entry>Fired when a deferred authentication occurs.  For example, at the end of the OpenID
            authentication process when the OpenID provider redirects the user back to the application.</entry>
          </row>
          <row>
            <entry>LoggedInEvent</entry>
            <entry>Fired when the user is successfully logged in.</entry>
          </row>
          <row>
            <entry>LoginFailedEvent</entry>
            <entry>Fired when an authentication attempt by the user fails.</entry>
          </row>
          <row>
            <entry>NotAuthorizedEvent</entry>
            <entry>Fired when the user is not authorized to invoke a particular operation.</entry>
          </row>
          <row>
            <entry>NotLoggedInEvent</entry>
            <entry>Fired when the user attempts to invoke a privileged operation before they have authenticated.</entry>
          </row>
          <row>
            <entry>PreAuthenticateEvent</entry>
            <entry>Fired just before a user is authenticated</entry>
          </row>
          <row>
            <entry>PostAuthenticateEvent</entry>
            <entry>Fired after a user has authenticated successfully.</entry>
          </row>
          <row>
            <entry>PreLoggedOutEvent</entry>
            <entry>Fired just before a user is logged out.</entry>
          </row>
          <row>
            <entry>PostLoggedOutEvent</entry>
            <entry>Fired after a user has logged out.</entry>
          </row>
          <row>
            <entry>PrePersistUserEvent</entry>
            <entry>Fired just before a new user is persisted (when using Identity Management).</entry>
          </row>
          <row>
            <entry>PrePersistUserRoleEvent</entry>
            <entry>Fired just before a new user role is persisted (when using Identity Management).</entry>
          </row>
          <row>
            <entry>QuietLoginEvent</entry>
            <entry>Fired when a user is quietly authenticated.</entry>
          </row>
          <row>
            <entry>SessionInvalidatedEvent</entry>
            <entry>Fired when a user's session is invalidated.</entry>
          </row>
          <row>
            <entry>UserAuthenticatedEvent</entry>
            <entry>Fired when a user is authenticated.</entry>
          </row>
          <row>
            <entry>UserCreatedEvent</entry>
            <entry></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    
  </section>
  
  <section>
    <title>Usage Example</title>
    
    <para>
      The following code listing shows the <code>SecurityEventMessages</code> class, from the Seam Security
      implementation library.  This class (which is disabled by default due to the <code>@Veto</code> annotation)
      uses the Messages API from Seam International to generate user-facing messages in response to certain
      security events.
    </para>
    
    <programlisting><![CDATA[package org.jboss.seam.security;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.event.Observes;

import org.jboss.seam.international.status.Messages;
import org.jboss.seam.security.events.AlreadyLoggedInEvent;
import org.jboss.seam.security.events.LoggedInEvent;
import org.jboss.seam.security.events.LoginFailedEvent;
import org.jboss.seam.security.events.NotLoggedInEvent;
import org.jboss.seam.security.events.PostAuthenticateEvent;
import org.jboss.solder.core.Requires;
import org.jboss.solder.core.Veto;

public @ApplicationScoped @Veto @Requires("org.jboss.seam.international.status.Messages")
class SecurityEventMessages {
    private static final String DEFAULT_LOGIN_FAILED_MESSAGE = "Login failed - please check your username and password before trying again.";
    private static final String DEFAULT_LOGIN_SUCCESSFUL_MESSAGE = "Welcome, {0}.";
    private static final String DEFAULT_ALREADY_LOGGED_IN_MESSAGE = "You're already logged in. Please log out first if you wish to log in again.";
    private static final String DEFAULT_NOT_LOGGED_IN_MESSAGE = "Please log in first.";

    public void postAuthenticate(@Observes PostAuthenticateEvent event, Messages messages, Identity identity) {
        messages.info(DEFAULT_LOGIN_SUCCESSFUL_MESSAGE, identity.getUser().getId());
    }

    public void addLoginFailedMessage(@Observes LoginFailedEvent event, Messages messages) {
        messages.error(DEFAULT_LOGIN_FAILED_MESSAGE);
    }

    public void addLoginSuccessMessage(@Observes LoggedInEvent event, Messages messages, Credentials credentials) {
        messages.info(DEFAULT_LOGIN_SUCCESSFUL_MESSAGE, credentials.getUsername());
    }

    public void addAlreadyLoggedInMessage(@Observes AlreadyLoggedInEvent event, Messages messages) {
        messages.error(DEFAULT_ALREADY_LOGGED_IN_MESSAGE);
    }

    public void addNotLoggedInMessage(@Observes NotLoggedInEvent event, Messages messages) {
        messages.error(DEFAULT_NOT_LOGGED_IN_MESSAGE);
    }
}]]></programlisting>    
  
  </section>
    
</chapter>
